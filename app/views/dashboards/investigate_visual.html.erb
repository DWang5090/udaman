
    <script type="text/javascript" src="/javascripts/d3.v2.js"></script>

    <script type="text/javascript">
		
	var params = {
		scale: 1,
		viz_data: [],
		unitw: 1,
		h: 10,
		left_margin: 100,
		space: 1,
		export: function () {},
	};
		
	function pf(num) {
		//if (num === "") return 0;
		return parseFloat(num.replace(",", ""));
	}
	
	function convert_to_color(num) {
		switch(parseInt(num))
		{
		case -1: return "#111111";
		case 0: return "#888888";
		case 13: return "#5D8DA2";
		case 12: return "#82A3B5";
		case 11: return "#A8BDC9";
		case 10: return "#CFDAE2";
		case 23: return "#96C5CC";
		case 22: return "#AFD2D7";
		case 21: return "#C8E0E4";
		case 20: return "#E2EEF1";
		case 33: return "#F7B056";
		case 32: return "#F9C37D";
		case 31: return "#FCD5A4";
		case 30: return "#FDE9CE";
		default: return "#888888";
		}
	}
	
	function assign_colors(data_array) {
		data_array.splice(0,2);
		var color_size_array = [];
		var current_val = data_array[0];
		var current_size = 0;
		var i=0;
		var length = data_array.length
		for (i=0; i < length; i++) {
			check_val = data_array.shift();
			if (check_val != current_val) {
				color_size_array.push({color: convert_to_color(current_val), size: current_size, end_pos: i });
				current_val = check_val;
				current_size = 1;
			} else {
				current_size+=1;
			}
		}
		color_size_array.push({color: convert_to_color(current_val), size: current_size, end_pos: i });
		return color_size_array;
	}
	
	function matching_diffs(text) {
		params.viz_data = text;
		max_length = 0;
		var data = d3.csv.parseRows(text);
		var formatted_data = data.map(function(elem) {
			max_length = elem.length > max_length ? elem.length : max_length;
			return { name:elem[0], id:elem[1], data: assign_colors(elem) }
		});
		
		var svg = d3.select("svg#matching_diffs")
			.attr("height", function(d) {return (params.h+params.space) * params.scale * (3+formatted_data.length)})
			.attr("width", (max_length * params.unitw + params.left_margin) * params.scale);
			//.attr("fill", "#444444");
		
		var rows = svg.selectAll("g")
			.data(formatted_data)
			.enter()
			.append("g")
			.attr("transform", function(d, i) {return "translate(0," +  (i * (params.h+params.space) * params.scale).toString() + ")"});
			//.attr("y", function(d, i) {return i * params.h * params.scale});
			
		var series_labels = rows.selectAll("text")
			.data(function(d) {return [d]})
			.enter()
			.append("a")
			.attr("xlink:href", function(d) {return "/series/" + d.id })
			.attr("target", "_blank")
			.append("text")
			.attr("class", "label-text")
			.attr("x", 0)
			.attr("y", (8+params.h) * params.scale)
			.text(function(d) { return d.name;});
				
		var datapoints = rows.selectAll("rect")
			.data(function(d) {return d.data})
			.enter()
			.append("rect")
			.attr("width", function(d) {return (d.size * params.unitw * params.scale)})
			.attr("height", params.h * params.scale)
			.attr("x", function(d) {return ((d.end_pos-d.size) * params.unitw + params.left_margin) * params.scale})
			.attr("y", params.h * params.scale)
			.attr("fill", function(d) {return d.color});
	}		

	function new_data_points(csv) {
		
		var series_count = csv.length;
		var datapoint_count = d3.sum(csv, function(d) { return d.new_datapoints_added });
		var largest_count = 0;
		var letter_counts = d3.nest()
			.key(function(d) {return d.series_name.slice(0,1)})
			.rollup(function(leaves) { return d3.sum(leaves, function(d) { return d.new_datapoints_added})})
			.map(csv);
		var all_letters_string = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
		var all_letters_counts = all_letters_string.split("").map(function(letter){
			if (letter_counts[letter] > largest_count)
				largest_count = letter_counts[letter];
			return [letter, letter_counts[letter]]; 
		});
		
		var dp_scale = d3.scale.linear().domain([0,largest_count]).range([0,250]);
		
		var svg = d3.select("svg#new_data_points")
			.attr("height", 300)
			.attr("width", 800);
		
		var dp_bars = svg.selectAll("rect.dp")
			.data(all_letters_counts)
			.enter()
			.append("rect")
			.attr("class", "dp")
			.attr("x", function(d,i) { return i * 20 })
			.attr("y", function(d) {return 265 - dp_scale(d[1])})
			.attr("width", 10)
			.attr("height", function(d) {return dp_scale(d[1])})
			.attr("fill", "green");
			
		var letter_labels = svg.selectAll("text")
			.data(all_letters_counts)
			.enter()
			.append("text")
			.attr("x", function (d,i) {return i * 20})
			.attr("y", 280)
			.text(function(d){return d[0]});
//		alert(all_letters_counts.toSource());
	}
	
	function download_results(csv) {
		alert(csv.toSource());
	}
	
	function packager_output(csv) {
		alert(csv.toSource());
	}
	
	//to get this to generate dynamically, remove the file from the public directory
	d3.text('/investigate_visual.csv', 'text/csv', matching_diffs); 
	d3.csv('/dp_added.csv', new_data_points);
	//d3.csv('/download_results.csv', download_results);
	//d3.csv('/packager_output.csv', packager_output);
	 
	</script>
	
	<style>
		h2 { text-align:center; color:gray; font-family:verdana; font-weight:100; font-size:20px; padding-right:50px; }
		table#datacells td svg {margin: 0 auto;}
		.budget_svg {float:left; }
		.line { fill: none; stroke: steelblue; stroke-width: 1.5px; }
		.label-text {font-size:8px; font-family:Arial, sans-serif; color: #888888;}
	</style>
	
	
	<div>
		<svg id="matching_diffs"></svg>
		<svg id="new_data_points"></svg>
	</div>
	

